/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Anex (https://sketchfab.com/anex)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/one-piece-going-merry-0e1f16189e8b4b4d9d9c3c60893d692b
Title: One Piece -Going Merry
*/

import React, { Children, useEffect, useRef } from 'react'
import { useAnimations, useGLTF } from '@react-three/drei'

import onepieceship from '../assets/3d/one_piece_-going_merry.glb'
import { useFrame } from '@react-three/fiber'
import {a} from '@react-spring/three'

const GoingMerry =({islandPosition,children,...props}) =>{

  const { nodes, materials,animations,scene } = useGLTF(onepieceship,true, 'https://www.gstatic.com/draco/v1/decoders/')
  const shipRef = useRef()
  const {actions} = useAnimations(animations,shipRef)
  const speed = 0.008; // Speed of the ship
  const maxDistance = 10; // Max distance from the center
  const direction = useRef(0);


// useFrame(() => {
//     const speed = 0.01; // Speed of the ship
//     const maxDistance = 10; // Maximum distance from the center

//     // Move the ship
//     if (shipRef.current.position.x >= maxDistance) {
//         shipRef.current.rotation.y = Math.PI; // Face left
//         shipRef.current.position.x -= speed; // Move left
//     } else if (shipRef.current.position.x <= -maxDistance) {
//         shipRef.current.rotation.y = 0; // Face right
//         shipRef.current.position.x += speed; // Move right
//     } else {
//         // Continue moving based on current rotation
//         if (shipRef.current.rotation.y === 0) {
//             shipRef.current.position.x += speed; // Move right
//         } else {
//             shipRef.current.position.x -= speed; // Move left
//         }
//     }

//     // Keep the ship at a fixed height
//     shipRef.current.position.y = -5.5; // Set this to the desired height
// });

useFrame(({camera,clock}) => {
    const speed = 0.02; // Speed of the ship
    const maxDistance = 15; // Maximum distance from the center
    const currentPosX = shipRef.current.position.x;
    const camerapos = camera.position.x +10
   
    // Move the ship
    if (currentPosX >= maxDistance) {
        shipRef.current.rotation.y = Math.PI/360 ;   // Face left
        // hipRef.current.position.y = Math.PI;
        shipRef.current.rotation.z = 0;
    
        // shipRef.current.rotation.z = 10;
        shipRef.current.position.x -= speed; // Move left
    } else if (currentPosX <= -maxDistance) {
        shipRef.current.rotation.y = 0; // Face right
        shipRef.current.rotation.z = Math.PI;
        shipRef.current.position.x += speed; // Move right
    } else {
        // Continue moving based on current rotation
        if (shipRef.current.rotation.y === 0) {
            shipRef.current.position.x += speed; // Move right
            // shipRef.current.rotation.y = 10
        } else {
            shipRef.current.position.x -= speed; // Move left
        }
    }

    // Keep the ship at a fixed height
    shipRef.current.position.y = -5.9; // Set this to the desired height
    // shipRef.current.rotation.y = 0
});

// const angleRef = useRef(0); // Keeps track of the current angle


// for round about 
// useFrame(() => {
//     // Update angle
//     let radius = 26
//     angleRef.current += speed; 
//     // shipRef.current.rotation.y = 5
//     // shipRef.current.rotation.z = 10
//     // shipRef.current.rotation.x = 10

//     // Calculate new position relative to the island
//     shipRef.current.position.x = islandPosition[0] + Math.cos(angleRef.current) * radius;
//     shipRef.current.position.z = islandPosition[2] + Math.sin(angleRef.current) * radius;
//     shipRef.current.position.y = islandPosition[1]; // Keep at the same height as the island
    
//     // Optionally, make the ship face the center
//     shipRef.current.lookAt(islandPosition[0], shipRef.current.position.y, islandPosition[2]);
//     shipRef.current.rotation.x = 1.8; // Reset x rotation
//         shipRef.current.rotation.z = -2.2;
//         shipRef.current.rotation.y = 3.2;
// });

  return (
    <a.group {...props} ref={shipRef} >
      <a.group >
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_2.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_3.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_10.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_11.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_12.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_13.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_14.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_15.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_16.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_17.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_18.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_19.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_20.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_21.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_22.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_23.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_24.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_25.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_26.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_27.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_28.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_29.geometry}
          material={materials.None}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_30.geometry}
          material={materials.None}
        />
       
      </a.group>
      {children}
    </a.group>
  )
}

export default GoingMerry;