/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Artjoms Horosilovs (https://sketchfab.com/Artjoms_Horosilovs)
License: CC-BY-NC-SA-4.0 (http://creativecommons.org/licenses/by-nc-sa/4.0/)
Source: https://sketchfab.com/3d-models/sea-keep-lonely-watcher-09a15a0c14cb4accaf060a92bc70413d
Title: Sea Keep "Lonely Watcher"
*/

import React, { useEffect, useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import SeaKeepScene from "../assets/3d/sea_keep_lonely_watcher.glb"
import {a} from '@react-spring/three'
import { useFrame, useThree } from '@react-three/fiber'
import { useDispatch, useSelector } from 'react-redux'
import { changeCurrentStage } from '../slice/HomeSlice'
// import { MeshStandardMaterial } from '@react-three/fiber';
// import {THREE } from 'three';

const SeaKeep = ({isRotating, setisRotating, setCurrentStage ,...props}) => {
  const { nodes, materials } = useGLTF(SeaKeepScene)
  const currentStage = useSelector((state)=> state.currentStage)
  const dispatch = useDispatch()
  const seakeepRef = useRef()
  const {gl, viewport} = useThree()
  const lastX = useRef(0)
  const rotationSpeed = useRef(0);
  const dampingFactor = 0.95;

  // Handle pointer (mouse or touch) down event
  const handlePointerDown = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setisRotating(true);

    // Calculate the clientX based on whether it's a touch event or a mouse event
    const clientX = event.touches ? event.touches[0].clientX : event.clientX;

    // Store the current clientX position for reference
    lastX.current = clientX;
  };

  // Handle pointer (mouse or touch) up event
  const handlePointerUp = (event) => {
    event.stopPropagation();
    event.preventDefault();
    setisRotating(false);
  };

  // Handle pointer (mouse or touch) move event
  const handlePointerMove = (event) => {
    event.stopPropagation();
    event.preventDefault();
    if (isRotating) {
      // If rotation is enabled, calculate the change in clientX position
      const clientX = event.touches ? event.touches[0].clientX : event.clientX;

      // calculate the change in the horizontal position of the mouse cursor or touch input,
      // relative to the viewport's width
      const delta = (clientX - lastX.current) / viewport.width;

      // Update the island's rotation based on the mouse/touch movement
      seakeepRef.current.rotation.y += delta * 0.01 * Math.PI;

      // Update the reference for the last clientX position
      lastX.current = clientX;

      // Update the rotation speed
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  };

// Handle keydown events
  const handleKeyDown = (e)=>{

    if(e.key==='ArrowLeft'){
      if(!isRotating) setisRotating(true)
    seakeepRef.current.rotation.y += 0.05 *Math.PI
  rotationSpeed.current = 0.125
  }
  
  else if(e.key ==='ArrowRight'){
if(!isRotating) setisRotating(true)
  seakeepRef.current.rotation.y -= 0.05 *Math.PI
rotationSpeed.current = -0.125
  }}

// Handle keyup events
  const handleKeyUp = (e)=>{
    if(e.key==='ArrowLeft' || e.key==='ArrowRight'){
    setisRotating(false)
  }}

  // Touch events for mobile devices
  const handleTouchStart = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setisRotating(true);
  
    const clientX = e.touches ? e.touches[0].clientX : e.clientX;
    lastX.current = clientX;
  }
  
  const handleTouchEnd = (e) => {
    e.stopPropagation();
    e.preventDefault();
    setisRotating(false);
  }
  
  const handleTouchMove = (e) => {
    e.stopPropagation();
    e.preventDefault();
  
    if (isRotating) {
      const clientX = e.touches ? e.touches[0].clientX : e.clientX;
      const delta = (clientX - lastX.current) / viewport.width;
  
      seakeepRef.current.rotation.y += delta * 0.01 * Math.PI;
      lastX.current = clientX;
      rotationSpeed.current = delta * 0.01 * Math.PI;
    }
  }


  useEffect(() => {
    // Add event listeners for pointer and keyboard events
    const canvas = gl.domElement;
    canvas.addEventListener("pointerdown", handlePointerDown);
    canvas.addEventListener("pointerup", handlePointerUp);
    canvas.addEventListener("pointermove", handlePointerMove);
    window.addEventListener("keydown", handleKeyDown);
    window.addEventListener("keyup", handleKeyUp);
    canvas.addEventListener("touchstart", handleTouchStart);
    canvas.addEventListener("touchend", handleTouchEnd);
    canvas.addEventListener("touchmove", handleTouchMove);

    // Remove event listeners when component unmounts
    return () => {
      canvas.removeEventListener("pointerdown", handlePointerDown);
      canvas.removeEventListener("pointerup", handlePointerUp);
      canvas.removeEventListener("pointermove", handlePointerMove);
      window.removeEventListener("keydown", handleKeyDown);
      window.removeEventListener("keyup", handleKeyUp);
      canvas.removeEventListener("touchstart", handleTouchStart);
      canvas.removeEventListener("touchend", handleTouchEnd);
      canvas.removeEventListener("touchmove", handleTouchMove);
    };
  }, [gl, handlePointerDown, handlePointerUp, handlePointerMove]);


  useFrame(() => {
    // If not rotating, apply damping to slow down the rotation (smoothly)
    if (!isRotating) {
      // Apply damping factor
      rotationSpeed.current *= dampingFactor;

      // Stop rotation when speed is very small
      if (Math.abs(rotationSpeed.current) < 0.001) {
        rotationSpeed.current = 0;
      }

      seakeepRef.current.rotation.y += rotationSpeed.current;
    }
     else {
      // When rotating, determine the current stage based on island's orientation
      const rotation = seakeepRef.current.rotation.y;

      /**
       * Normalize the rotation value to ensure it stays within the range [0, 2 * Math.PI].
       * The goal is to ensure that the rotation value remains within a specific range to
       * prevent potential issues with very large or negative rotation values.
       *  Here's a step-by-step explanation of what this code does:
       *  1. rotation % (2 * Math.PI) calculates the remainder of the rotation value when divided
       *     by 2 * Math.PI. This essentially wraps the rotation value around once it reaches a
       *     full circle (360 degrees) so that it stays within the range of 0 to 2 * Math.PI.
       *  2. (rotation % (2 * Math.PI)) + 2 * Math.PI adds 2 * Math.PI to the result from step 1.
       *     This is done to ensure that the value remains positive and within the range of
       *     0 to 2 * Math.PI even if it was negative after the modulo operation in step 1.
       *  3. Finally, ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI) applies another
       *     modulo operation to the value obtained in step 2. This step guarantees that the value
       *     always stays within the range of 0 to 2 * Math.PI, which is equivalent to a full
       *     circle in radians.
       */
      const normalizedRotation =
        ((rotation % (2 * Math.PI)) + 2 * Math.PI) % (2 * Math.PI);
    
      // Set the current stage based on the island's orientation
      switch (true) {
        case normalizedRotation >5.85 && normalizedRotation <=6.2:
          dispatch(changeCurrentStage(1));
          break;
        case normalizedRotation >= 5.05 && normalizedRotation <= 5.55:
          dispatch(changeCurrentStage(2));
          break;
        case normalizedRotation >= 1.5 && normalizedRotation <= 2.5:
          dispatch(changeCurrentStage(3));
          break;
          case normalizedRotation >= 3.5 && normalizedRotation <= 4.7:
          dispatch(changeCurrentStage(4));
          break;
        // case normalizedRotation >= 2.4 && normalizedRotation <= 3.4:
        //   dispatch(changeCurrentStage(4));
        //   break;
        // case normalizedRotation >= 4.25 && normalizedRotation <= 4.75:
        //   dispatch(changeCurrentStage(5));
        //   break;
        default:
          dispatch(changeCurrentStage(null));
      }
    }
  });



  return (
    // <mesh ref={seakeepRef} >
    
    <a.group {...props} ref={seakeepRef} >
      <group position={[17.117, 218.356, 23.591]} rotation={[-Math.PI / 2, 0, Math.PI]}>
        <group position={[33.745, 38.713, -60.289]}>
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Fortress_0.geometry}
            material={materials.Fortress}
            // materialProps ={{ side: 2 }}
            // customDepthMaterial={2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Fortress_0_1.geometry}
            material={materials.Fortress}
            // materialProps={{ side: 2 }}
            // customDepthMaterial={2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Fortress_0_2.geometry}
            material={materials.Fortress}
            // materialProps={{ side: 2 }}
            // customDepthMaterial={2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Environment_0.geometry}
            material={materials.Environment}
            // materialProps={{ side: 2 }}
            // customDepthMaterial={2}
          />
          <mesh
            castShadow
            receiveShadow
            geometry={nodes.Fortress_Sand_0.geometry}
            material={materials.Sand}
            // materialProps={{ side: 2 }}
            // customDepthMaterial={2}
          />
        </group>
      </group>
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sea_Sea_0.geometry}
        material={materials.material}
        position={[-1.388, 326.224, 14.92]}
        rotation={[-Math.PI / 2, 0, 0]}
        // materialProps={{ side: 2 }}
        // customDepthMaterial={2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Sky_Sky_0.geometry}
        material={materials.material_4}
        rotation={[-Math.PI / 2, 0, 0]}
        // materialProps={{ side: 2 }}
        // customDepthMaterial={2}
      />
    </a.group>
    
  //  </mesh>
  )
}


export default SeaKeep;

// const SeaKeep = (props)=>{

//   const {scene} = useGLTF(SeaKeepScene)
//   return(
//     <mesh {...props} >
//     <primitive object={scene} />
//   </mesh>
//   )
// }
//  export default SeaKeep;
